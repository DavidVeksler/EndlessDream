@page "/"
@page "/chat"
@using System.Text
@using System.Text.Json
@inject LlmService LlmService
@inject IJSRuntime JS

<PageTitle>AI-Powered Chat</PageTitle>
<HeadContent>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content=""/>
</HeadContent>

<div class="d-flex flex-column vh-100">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="chat#"><i class="bi bi-robot"></i> LLM Chat</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <button class="nav-link btn btn-link" @onclick="NewChat"><i class="bi bi-plus-circle"></i> New Chat</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link btn btn-link" @onclick='() => JS.InvokeVoidAsync("openModal", "settingsModal")'>
                            <i class="bi bi-gear"></i> Settings
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="chat-main">
        <div class="chat-sidebar d-none d-md-block">
            <div class="list-group">
                @foreach (var chat in Chats)
                {
                    <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center @(chat == CurrentChat ? "active" : "")"
                            @onclick="() => SelectChat(chat)">
                        <span class="text-truncate">
                            <i class="bi bi-chat-left-text"></i> @chat.Title
                        </span>
                        <span class="badge bg-primary rounded-pill">@chat.Messages.Count</span>
                    </button>
                }
            </div>
        </div>

        <div class="chat-content">
            <div class="chat-header">
                <h5 class="mb-0 text-truncate">@CurrentChat.Title</h5>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        @SelectedModel.Id
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        @foreach (var model in Models)
                        {
                            <li>
                                <a class="dropdown-item" @onclick="() => SelectModel(model)">@model.Id</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="chat-messages" @ref="messagesRef" id="chatMessages">
                @foreach (var msg in CurrentChat.Messages)
                {
                    <div class="d-flex @(msg.IsUser ? "justify-content-end" : "justify-content-start") mb-3">
                        <div class="card @(msg.IsUser ? "bg-primary text-white" : "") shadow-sm @(msg.IsError ? "border-danger" : "bg-light")"
                             style="max-width: 75%;">
                            <div class="card-body">
                                <pre class="card-text mb-0" style="font-family: inherit; margin: 0; white-space: pre-wrap; word-wrap: break-word;">@msg.Content</pre>
                            </div>
                            <div class="card-footer text-muted small d-flex justify-content-between align-items-center">
                                <span>@(msg.IsUser ? "You" : "AI")</span>
                                <span>@msg.Timestamp.ToString("g")</span>
                            </div>
                        </div>
                    </div>
                }
                @if (IsSending)
                {
                    <div class="d-flex justify-content-start mb-3">
                        <div class="card bg-light shadow-sm">
                            <div class="card-body">
                                <div class="typing-indicator">
                                    <span></span><span></span><span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="chat-input" style="margin-bottom: 100px; position: relative;">
                <div class="input-group">
                    <input type="text" class="form-control" @bind="input" @onkeyup="@(e => e.Key == "Enter" ? SendMessage() : null)"
                           placeholder="Type your message..." disabled="@IsSending">
                    <button class="btn btn-primary" @onclick="SendMessage" disabled="@IsSending">
                        @if (IsSending)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-send"></i>
                            <span class="d-none d-md-inline">Send</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="tempRange" class="form-label">Temperature: @temp</label>
                    <input type="range" class="form-range" min="0" max="1" step="0.1" id="tempRange" @bind="temp">
                </div>
                <div class="mb-3">
                    <label for="maxTokens" class="form-label">Max Tokens: @maxTokens</label>
                    <input type="number" class="form-control" id="maxTokens" @bind="maxTokens">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick='() => JS.InvokeVoidAsync("closeModal", "settingsModal")'>
                    Save
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Conversation> Chats = new();
    private Conversation CurrentChat = new();
    private List<Model> Models = new();
    private Model SelectedModel = new() { Id = "Default Model" };
    private ElementReference messagesRef;
    private string input = "",
    private float temp = 0.7f;
    private int maxTokens = 99999;
    private bool IsSending;

    protected override async Task OnInitializedAsync()
    {
        NewChat();
        await LoadModels();
        await LoadChats();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesRef);
    }

    private async Task LoadModels()
    {
        Models = await LlmService.GetModelsAsync();
        Models.Add(new Model { Id = "RichAgent", EndpointUrl = "http://localhost:8000" });
        if (Models.Any()) SelectedModel = Models[0];
    }

    private async Task LoadChats()
    {
        try
        {
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "chatHistory");
            if (!string.IsNullOrEmpty(json))
            {
                Chats = JsonSerializer.Deserialize<List<Conversation>>(json) ?? new List<Conversation>();
                if (Chats.Any()) CurrentChat = Chats[0];
            }
        }
        catch
        {
            Chats = new List<Conversation>();
            NewChat();
        }
    }

    private async Task SaveChats()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "chatHistory",
            JsonSerializer.Serialize(Chats, new JsonSerializerOptions { WriteIndented = true }));
    }

    private void NewChat()
    {
        var chat = new Conversation { Title = $"Chat {Chats.Count + 1}" };
        Chats.Add(chat);
        CurrentChat = chat;
    }

    private void SelectChat(Conversation chat)
    {
        CurrentChat = chat;
        StateHasChanged();
        InvokeAsync(() => JS.InvokeVoidAsync("scrollToBottom", messagesRef));
    }

    void SelectModel(Model model)
    {
        SelectedModel = model;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(input) || IsSending) return;

        IsSending = true;
        CurrentChat.Messages.Add(new Message { IsUser = true, Content = input, Timestamp = DateTime.Now });
        StateHasChanged();

        try
        {
            var aiMsg = new Message { IsUser = false, Content = "", Timestamp = DateTime.Now };
            CurrentChat.Messages.Add(aiMsg);
            var sb = new StringBuilder();

            await LlmService.StreamCompletionAsync(
                CurrentChat.Messages,
                $"You are using the {SelectedModel.Id} model.",
                async content =>
                {
                    sb.Append(content);
                    aiMsg.Content = sb.ToString();
                    await InvokeAsync(StateHasChanged);
                },
                temp,
                maxTokens,
                SelectedModel.Id
            );
        }
        catch (Exception ex)
        {
            CurrentChat.Messages.Add(new Message
            {
                IsUser = false,
                IsError = true,
                Content = $"Error: {ex.Message}",
                Timestamp = DateTime.Now
            });
            error = $"Failed to get AI response: {ex.Message}";
        }
        finally
        {
            IsSending = false;
            StateHasChanged();
            await SaveChats();
        }
    }

}